/* This GPLex file was machine-generated by the BNF converter */

%namespace OCL

%{
        /// <summary>
        /// Buffer for escaped characters in strings.
        /// </summary>
        private System.Text.StringBuilder strBuffer = new System.Text.StringBuilder();

        /// <summary>
        /// Change to enable output - useful for debugging purposes
        /// </summary>
        public bool Trace = false;

        /// <summary>
        /// Culture-independent IFormatProvider for numbers. 
        /// This is just a "wrapper" for System.Globalization.NumberFormatInfo.InvariantInfo.
        /// </summary>
        /// <remarks>
        /// This should be used when parsing numbers. Otherwise the parser might fail: 
        /// culture en-US uses a dot as decimal separator, while for example sv-SE uses a comma. 
        /// BNFC uses dot as decimal separator for Double values, so if your culture is sv-SE 
        /// the parse will fail if this InvariantInfo isn't used.
        /// </remarks>
        private static System.Globalization.NumberFormatInfo InvariantFormatInfo = System.Globalization.NumberFormatInfo.InvariantInfo;

        /// <summary>
        /// Convenience method to create scanner AND initialize it correctly.
        /// As long as you don't want to enable trace output, this is all you 
        /// need to call and give to the parser to be able to parse.
        /// </summary>
        public static Scanner CreateScanner(Stream stream)
        {
          Scanner scanner = new Scanner(stream);
          scanner.Begin();
          return scanner;
        }

        /// <summary>
        /// Sets the scanner to the correct initial state (YYINITIAL). 
        /// You should call this method prior to calling parser.Parse().
        /// </summary>
        public void Begin()
        {
          BEGIN(YYINITIAL);
        }

        /// <summary>
        /// Convenience method to "reset" the buffer for escaped characters in strings.
        /// </summary>
        private void BufferReset()
        {
          this.strBuffer = new System.Text.StringBuilder();
        }

%}


alpha [a-zA-Z]
alphaCapital [A-Z]
alphaSmall [a-z]
digit [0-9]
ident [a-zA-Z0-9'_]
%s YYINITIAL
%s COMMENT
%s CHAR
%s CHARESC
%s CHAREND
%s STRING
%s ESCAPED
%%

<YYINITIAL>":"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_0;
<YYINITIAL>"::"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_1;
<YYINITIAL>"("                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_2;
<YYINITIAL>")"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_3;
<YYINITIAL>"="                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_4;
<YYINITIAL>"+"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_5;
<YYINITIAL>"-"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_6;
<YYINITIAL>"<"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_7;
<YYINITIAL>"<="                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_8;
<YYINITIAL>">"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_9;
<YYINITIAL>">="                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_10;
<YYINITIAL>"/"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_11;
<YYINITIAL>"*"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_12;
<YYINITIAL>"<>"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_13;
<YYINITIAL>","                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_14;
<YYINITIAL>"^"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_15;
<YYINITIAL>"?"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_16;
<YYINITIAL>"["                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_17;
<YYINITIAL>"]"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_18;
<YYINITIAL>"@"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_19;
<YYINITIAL>"|"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_20;
<YYINITIAL>";"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_21;
<YYINITIAL>"{"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_22;
<YYINITIAL>"}"                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_23;
<YYINITIAL>".."                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_24;
<YYINITIAL>"."                                    if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_25;
<YYINITIAL>"->"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_26;
<YYINITIAL>"Bag"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_27;
<YYINITIAL>"Collection"                           if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_28;
<YYINITIAL>"Sequence"                             if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_29;
<YYINITIAL>"Set"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_30;
<YYINITIAL>"and"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_31;
<YYINITIAL>"context"                              if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_32;
<YYINITIAL>"def"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_33;
<YYINITIAL>"else"                                 if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_34;
<YYINITIAL>"endif"                                if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_35;
<YYINITIAL>"endpackage"                           if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_36;
<YYINITIAL>"false"                                if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_37;
<YYINITIAL>"if"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_38;
<YYINITIAL>"implies"                              if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_39;
<YYINITIAL>"in"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_40;
<YYINITIAL>"inv"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_41;
<YYINITIAL>"let"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_42;
<YYINITIAL>"not"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_43;
<YYINITIAL>"null"                                 if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_44;
<YYINITIAL>"or"                                   if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_45;
<YYINITIAL>"package"                              if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_46;
<YYINITIAL>"post"                                 if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_47;
<YYINITIAL>"pre"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_48;
<YYINITIAL>"then"                                 if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_49;
<YYINITIAL>"true"                                 if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_50;
<YYINITIAL>"xor"                                  if(Trace) System.Console.Error.WriteLine(yytext); return (int)Tokens.SYMB_51;
<YYINITIAL>"--"[^\n]*\n                           /* BNFC single-line comment */;
<YYINITIAL>"/*"                                   BEGIN(COMMENT);
<COMMENT>"*/"                                     BEGIN(YYINITIAL);
<COMMENT>.                                        /* BNFC multi-line comment */;
<COMMENT>[\n]                                     /* BNFC multi-line comment */;
<YYINITIAL>"\""                                   BEGIN(STRING);
<STRING>\\                                        BEGIN(ESCAPED);
<STRING>\"                                        yylval.string_ = this.strBuffer.ToString(); BufferReset(); BEGIN(YYINITIAL); return (int)Tokens.STRING_;
<STRING>.                                         this.strBuffer.Append(yytext);
<ESCAPED>n                                        this.strBuffer.Append("\n");   BEGIN(STRING);
<ESCAPED>\"                                       this.strBuffer.Append("\"");   BEGIN(STRING);
<ESCAPED>\\                                       this.strBuffer.Append("\\");   BEGIN(STRING);
<ESCAPED>t                                        this.strBuffer.Append("\t");   BEGIN(STRING);
<ESCAPED>.                                        this.strBuffer.Append(yytext); BEGIN(STRING);
<YYINITIAL>{digit}+"."{digit}+("e"(\-)?{digit}+)? if(Trace) System.Console.Error.WriteLine(yytext); yylval.double_ = Double.Parse(yytext, InvariantFormatInfo); return (int)Tokens.DOUBLE_;
<YYINITIAL>{digit}+                               if(Trace) System.Console.Error.WriteLine(yytext); yylval.int_    = Int32.Parse(yytext,  InvariantFormatInfo); return (int)Tokens.INTEGER_;
<YYINITIAL>{alpha}{ident}*                        if(Trace) System.Console.Error.WriteLine(yytext); yylval.string_ = yytext; return (int)Tokens.IDENT_;
<YYINITIAL>[ \t\r\n\f]                            /* ignore white space. */;
<YYINITIAL>.                                      return (int)Tokens.error;

%%
